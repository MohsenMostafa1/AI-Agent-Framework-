name: Model Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      quantized:
        description: 'Deploy quantized model'
        required: false
        default: 'false'
        type: boolean

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/ai-agent
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      run: |
        if [ "${{ inputs.quantized }}" = "true" ]; then
          docker build -f ci_cd/docker/quantized.Dockerfile -t $DOCKER_IMAGE:$DOCKER_TAG .
        else
          docker build -f ci_cd/docker/inference.Dockerfile -t $DOCKER_IMAGE:$DOCKER_TAG .
        fi
        docker push $DOCKER_IMAGE:$DOCKER_TAG
        
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Deploy to ECS
      run: |
        if [ "${{ inputs.environment }}" = "production" ]; then
          aws ecs update-service \
            --cluster ai-agent-cluster \
            --service ai-agent-service \
            --force-new-deployment \
            --task-definition ${{ secrets.PRODUCTION_TASK_DEFINITION }}
        else
          aws ecs update-service \
            --cluster ai-agent-staging-cluster \
            --service ai-agent-staging-service \
            --force-new-deployment \
            --task-definition ${{ secrets.STAGING_TASK_DEFINITION }}
        fi
        
    - name: Update MCP Endpoint
      if: ${{ inputs.environment == 'production' }}
      run: |
        curl -X POST \
          -H "Authorization: token ${{ secrets.MCP_DEPLOY_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/mcp_sync.yml/dispatches \
          -d '{"ref":"main"}'
